COMPONENTS

- Data is an array of objects
- The song model is a single song, with a property play that triggers a play event
- Songs (= library) is a collection of song models
  - SongQueue is a subclass of Songs, which is also a collection of song models
- App model is a model with global properties
- App view
  - Player view is a subview of app view, and is bound to Song model
  - Library view is a subview of appview, bound to the library collection instance of Song models
    - Library entry view is a subview of library, bound to the song model


THE PLAY EVENT

- SETTING

1. LibraryEntryView listens for click events on the DOM
2. LibraryEntryView triggers a play property on it's model (song)
3. Song model triggers a play event when it's play property is called
4. The songs collection (Library) listens for that event
5. The songs collection (Library) sets the app models current song to be the calling song

- LISTENING

6. The app view listens for changes to the app's current song
7. The app view calls the set song method of the player view
8. The player view's set song method renders the song in the DOM

EXTRA CREDIT

1. Show the play count (how many times a given song has been played) next to each song title. {DONE}

2. Convert your app to use AMD by using Require.js. AMD (asynchronous module definition) is a system for loading JavaScript files asynchronously. [DONE]

3. Store application state in localStorage, so it persists after you reload the page.

-- Download/Install BackBone LocalStorage
-- Add BackBone LocalStorage adapter to Require config
-- Instantiate a new LocalStorage collection in the library collection
-- Call "this.save" in SongModel to save values in local storage as
key value pairs
-- Call all values as normal?

SAVING
// When we enqueue / dequeue save the queue
// When we play, save the playcount

FETCHING
// When we load the library, we fetch the song models
// When we load the sonqueue, we fetch the songQueue





4. Improve your application's UI by adding web fonts and replacing your 'Add to queue" and upvote/downvote buttons with icons.

  Make a WebAudio music visualizer. Check out this chapter of the O'Reilly book on Web Audio, and open the Sources tab of DevTools to inspect this example. Put your visualizer in its own Backbone.View!

5. Allow users to create multiple playlists.

  Add a router and assign unique URLs to playlists, subpages and/or songs (for example, index.html#songs/:title of the song will play that song).

6. Implement test and functionality for upvote/downvote next to each song title.



